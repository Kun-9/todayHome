<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="seller">
<!-- 판매자 회원가입 -->
	<update id="createSeller" parameterType="com.sp.app.domain.seller.Seller">
 		 INSERT ALL
    		INTO seller (seller_id, member_id, representative_name, business_number,brand_name,seller_name, tel, email, password,presentation, reg_date)
    		VALUES (SEQ_SELLER.NEXTVAL, #{memberId}, #{representativeName}, #{businessNumber}, #{brandName}, #{sellerName}, #{tel}, #{email}, #{password},#{presentation}, SYSDATE)
    		INTO seller_status (seller_id, status)
    		VALUES (SEQ_SELLER.CURRVAL, 0)
  		SELECT * FROM dual
	</update>
	
<!-- 판매자 정보 수정 -->	
	<update id="updateSeller" parameterType="com.sp.app.domain.seller.Seller">
		UPDATE SELLER SET password=#{password},
			seller_name=#{sellerName},tel=#{tel},
			email=#{email}
			presentation=#{presentation, jdbcType=VARCHAR},reg_date=SYSDATE
		WHERE seller_id=#{sellerId}	
	</update>
	
<!-- 판매자 상태 확인 -->
	<select id="getSellerStatus" parameterType="Long" resultType="com.sp.app.domain.seller.Seller">
		SELECT status 
		FROM seller_status
		WHERE seller_id= #{sellerId}
	</select>
	
<!-- 판매자 상태 수정 -->
	<update id="updateSellerStatus" parameterType="com.sp.app.domain.seller.Seller">
		UPDATE seller_status SET status = #{status}
		WHERE seller_id = #{sellerId}	
	</update>
	
<!-- 	판매자 리스트 : 
판매자 리스트를 가지고 오는데 검색창에는 이름, 사업자번호,판매자이름,브랜드이름 중 하나만 검색 가능하고 정렬도 정산 오름&내림,가입일 오름&내림차순 중 하나만 가능하고
상태 체크창에서는 대기,수락,거절,정지가 복수 선택이 가능-->
  <select id="getSellersByCondition" parameterType="map" resultType="com.sp.app.domain.seller.Seller">
  SELECT s.seller_id AS sellerId, s.brand_name AS brandName, s.business_number AS businessNumber, 
  		 s.seller_name AS sellerName, s.tel AS tel, s.email AS email,
  		 s.representative_name AS representativeName, s.presentation AS presentation,
  		 s.accumulated_amount AS accumulatedAmount, to_char(s.reg_date, 'YYYY-MM-DD') AS regDate,
  		 ss.status AS status
  FROM seller s
  JOIN seller_status ss ON s.seller_id = ss.seller_id
  <where>
    <if test="condition=='sellerName'">
      INSTR(s.seller_name, #{keyword}) &gt; 0
    </if>
    <if test="condition=='businessNumber'">
      INSTR(s.business_number, #{keyword}) &gt; 0
    </if>
    <if test="condition=='brandName'">
      INSTR(s.brand_name, #{keyword}) &gt; 0
    </if>
    <if test="status != null">
    	AND
      <foreach item="sellectedStatus" collection="status" separator=" OR ">
        ss.status = #{sellectedStatus}
      </foreach>
    </if>
  </where>
  <if test="orderByAmount != null">
    <if test="orderByAmount == 'asc'">
      ORDER BY s.accumulated_amount ASC
    </if>
    <if test="orderByAmount == 'desc'">
      ORDER BY s.accumulated_amount DESC
    </if>
  </if>
  <if test="orderByDate != null">
    <if test="orderByDate == 'asc'">
      ORDER BY s.reg_date ASC
    </if>
    <if test="orderByDate == 'desc'">
      ORDER BY s.reg_date DESC
    </if>
  </if>
</select>

	
 <!-- 판매자 상태에 따른 수 -->
	<select id="getSellerCount" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM seller_status
		WHERE status = #{status}	  
	</select>
	
<!-- 판매자 아이디로 판매자 리스트 -->
	<select id="getSellerBySellerId" parameterType="Long" resultType="com.sp.app.domain.seller.Seller">
		SELECT brand_name AS brandName, business_number AS businessNumber, 
  		 seller_name AS sellerName,tel,email,
  		 representative_name AS representativeName,presentation,
  		 accumulated_amount AS accumulatedAmount, to_char(reg_date, 'YYYY-MM-DD') AS regDate
  		From seller
  		WHERE seller_id=#{seller_id}	
	</select>
<!-- 판매자 이메일로 판매자 리스트 -->
	<select id="getSellerByEmail" parameterType="String" resultType="com.sp.app.domain.seller.Seller">
		SELECT s.seller_id AS sellerId,s.member_id AS memberId, s.brand_name AS brandName,s.password AS password, s.business_number AS businessNumber, 
  			s.seller_name AS sellerName, s.tel AS tel, s.email AS email,
  		 	s.representative_name AS representativeName, s.presentation AS presentation,
  		 	s.accumulated_amount AS accumulatedAmount, to_char(s.reg_date, 'YYYY-MM-DD') AS regDate,
  		 	ss.status AS status
  		FROM seller s
  		JOIN seller_status ss ON s.seller_id = ss.seller_id
		WHERE s.email = #{email}
	</select>
	
	<select id="businessNumberCheck" parameterType="String" resultType="int">
		select count(*)
		from SELLER
		where business_number = #{businessNumber}
    </select>
</mapper>