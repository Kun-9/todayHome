<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="productManagement">
    <insert id="insertProduct" parameterType="com.sp.app.domain.product.Product">
        <selectKey keyProperty="productId" resultType="Long" order="BEFORE">
            SELECT SEQ_PRODUCT.NEXTVAL as productId FROM DUAL
        </selectKey>
        insert INTO product (product_id, seller_id, product_category_id, product_name, content, price, discount_percent, delivery_cost)
        VALUES (#{productId}, #{sellerId}, #{productCategoryId}, #{productName}, #{content, jdbcType=VARCHAR}, #{price, jdbcType=VARCHAR}, #{discountPercent, jdbcType=VARCHAR}, #{deliveryCost, jdbcType=VARCHAR})
    </insert>

    <insert id="insertProductImg" parameterType="map">
        INSERT INTO product_img (PRODUCT_IMG_ID, PRODUCT_ID, SAVE_NAME, TYPE, SEQUENCE)
        VALUES (SEQ_PRODUCT_IMG.nextval, #{productId}, #{imgName}, #{type}, #{sequence})
    </insert>

    <select id="getProductById" parameterType="Long" resultType="com.sp.app.domain.product.Product">
        SELECT p.product_id as productId, p.seller_id as sellerId, product_category_id as productCategoryId,
                product_name as productName, content, to_char(p.reg_date, 'yyyy-mm-dd') as regDate, price,
                remain_quantity as remainQuantity, discount_percent as discountPercent, delivery_cost as deliveryCost,
                reserving_point_percent as reservingPointPercent,
                NVL(product_scrap_cnt, 0) AS productScrapCnt
        FROM PRODUCT P
                JOIN SELLER S2 ON P.SELLER_ID = S2.SELLER_ID
                LEFT OUTER JOIN(
                SELECT PRODUCT_ID, COUNT(*) AS PRODUCT_SCRAP_CNT
                FROM PRODUCT_SCRAP
                GROUP BY PRODUCT_ID
        ) PS ON PS.PRODUCT_ID = P.PRODUCT_ID
        WHERE P.PRODUCT_ID = #{productId}
    </select>

    <select id="getProductImgList" parameterType="Long" resultType="com.sp.app.domain.product.ProductImg">
        SELECT save_name AS saveName, TYPE, sequence
        FROM product_img
        WHERE product_id = #{producId}
        ORDER BY SEQUENCE
    </select>

    <update id="increaseImgSequences" parameterType="map">
        UPDATE product_img
        SET sequence = sequence + 1
        WHERE PRODUCT_ID = #{productId} and sequence >= #{sequence}
    </update>

    <insert id="insertScrapProduct" parameterType="map">
        INSERT INTO PRODUCT_SCRAP (MEMBER_ID, PRODUCT_ID)
        VALUES (#{memberId}, #{productId})
    </insert>

    <delete id="deleteScrapProduct" parameterType="map">
        DELETE PRODUCT_SCRAP
        WHERE PRODUCT_ID = #{productId} and MEMBER_ID = #{memberId}
    </delete>

    <select id="isScrapProduct" resultType="int" parameterType="map">
        SELECT COUNT(*)
        FROM PRODUCT_SCRAP
        WHERE MEMBER_ID = #{memberId} and PRODUCT_ID = #{productId}
    </select>

    <select id="getMainOptionByParentId" resultType="com.sp.app.domain.product.ProductMainOption" parameterType="map">
        SELECT option_id AS mainOptionId, parent_option_id AS parentOptionId, product_id AS productId, option_name AS optionName
        FROM product_main_option
        WHERE product_id = #{productId} AND  parent_option_id
        <if test="parentOptionId == null">
            is null
        </if>
        <if test="parentOptionId != null">
            = #{parentOptionId , jdbcType=VARCHAR}
        </if>
    </select>

    <select id="getSubOptionsByMainOptionId" resultType="com.sp.app.domain.product.ProductSubOption" parameterType="Long">
        SELECT option_detail_id AS subOptionId, option_detail_name AS subOptionName
        FROM product_sub_option
        WHERE option_id = #{mainOptionId}
    </select>

    <select id="getStockBySubOptionId" resultType="com.sp.app.domain.product.ProductStock" parameterType="Long">
        SELECT option_price AS optionPrice, quantity, OPTION_DETAIL_ID AS subOptionId1, option_detail_id2 AS subOptionId2
        FROM stock
        WHERE option_detail_id = #{subOptionId}
    </select>

    <select id="getMainOptionSeq" resultType="Long">
        SELECT SEQ_PRODUCT_MAIN_OPTION.nextval FROM DUAL
    </select>

    <select id="getProductSeq" resultType="Long">
        SELECT SEQ_PRODUCT.nextval FROM DUAL
    </select>

    <select id="getMainOptionCnt" resultType="int" parameterType="Long">
        SELECT count(*)
        FROM (SELECT CONNECT_BY_ROOT option_id AS option_id, option_name, PRODUCT_ID
              FROM product_main_option
              START WITH parent_option_id IS NULL
              CONNECT BY PRIOR option_id = parent_option_id)
        WHERE PRODUCT_ID = #{product}
    </select>

    <insert id="insertMainOption" parameterType="com.sp.app.domain.product.ProductMainOption">
        <selectKey keyProperty="mainOptionId" resultType="Long" order="BEFORE">
            SELECT SEQ_PRODUCT_MAIN_OPTION.NEXTVAL as mainOptionId FROM DUAL
        </selectKey>
        INSERT INTO product_main_option (option_id, parent_option_id, product_id, option_name)
        VALUES (#{mainOptionId}, #{parentOptionId ,jdbcType=VARCHAR}, #{productId}, #{optionName})
    </insert>

    <select id="getOptionMapByStockId" parameterType="Long" resultType="com.sp.app.domain.product.OptionMap">
        select pmo.option_id AS mainOptionId, pmo.OPTION_NAME AS mainOptionName, option_detail_id AS subOptionId, OPTION_DETAIL_NAME AS subOptionName
        FROM PRODUCT_SUB_OPTION
        JOIN PRODUCT_MAIN_OPTION PMO ON PMO.OPTION_ID = PRODUCT_SUB_OPTION.OPTION_ID
        WHERE OPTION_DETAIL_ID IN (
            SELECT option_detail_id
            FROM stock
            WHERE stock_id = #{optionDetailId}
            UNION ALL
            SELECT option_detail_id2
            FROM stock
            WHERE stock_id = #{optionDetailId}
        )
    </select>


    <insert id="insertSubOption" parameterType="com.sp.app.domain.product.ProductSubOption">
        <selectKey keyProperty="subOptionId" resultType="Long" order="BEFORE">
            SELECT SEQ_PRODUCT_SUB_OPTION.NEXTVAL as mainOptionId FROM DUAL
        </selectKey>
        INSERT INTO PRODUCT_SUB_OPTION (OPTION_DETAIL_ID, OPTION_ID, OPTION_DETAIL_NAME)
        VALUES (#{subOptionId}, #{mainOptionId}, #{subOptionName})
    </insert>

    <insert id="insertStock" parameterType="com.sp.app.domain.product.ProductStock">
        INSERT INTO STOCK (STOCK_ID, OPTION_PRICE, QUANTITY, OPTION_DETAIL_ID, OPTION_DETAIL_ID2)
        VALUES (SEQ_STOCK_ID.nextval, #{optionPrice}, #{quantity}, #{subOptionId1, jdbcType=VARCHAR}, #{subOptionId2, jdbcType=VARCHAR})
    </insert>

    <select id="getStockListByProductId" parameterType="Long" resultType="com.sp.app.domain.product.ProductStock">
        SELECT stock_id AS stockId, pmo.option_name as mainOptionName1,
                subOptionName1 as subOptionName1, pmo2.option_name AS mainOptionName2,
                subOptionName2, pmo.option_id as mainOptionId1, pmo2.option_id as mainOptionId2,
                sb.subOptionId1, sb.subOptionId2, pmo.product_id AS productId, optionPrice, QUANTITY
        FROM
            (SELECT stock_id, s.option_detail_id, pso.option_detail_name AS subOptionName1,
                    pso2.option_detail_name AS subOptionName2,
                    pso.option_id AS option_id1, pso2.option_id AS option_id2,
                    option_price AS optionPrice, pso.option_detail_id as subOptionId1,
                    pso2.option_detail_id AS subOPtionId2, QUANTITY
                FROM stock s
                LEFT JOIN product_sub_option pso ON s.option_detail_id = pso.option_detail_id
                LEFT JOIN product_sub_option pso2 ON s.option_detail_id2 = pso2.option_detail_id) sb
                LEFT JOIN product_main_option pmo on sb.option_id1 = pmo.option_id
                LEFT JOIN product_main_option pmo2 on sb.option_id2 = pmo2.option_id
        WHERE pmo.product_id = #{productId}
        ORDER BY subOptionId1, subOPtionId2
    </select>

    <select id="getStockByStockId" parameterType="Long" resultType="com.sp.app.domain.product.ProductStock">
        SELECT stock_id AS stockId, pmo.option_name as mainOptionName1,
                subOptionName1 as subOptionName1, pmo2.option_name AS mainOptionName2,
                subOptionName2, pmo.option_id as mainOptionId1, pmo2.option_id as mainOptionId2,
                sb.subOptionId1, sb.subOptionId2, pmo.product_id AS productId, optionPrice, QUANTITY
        FROM
            (SELECT stock_id, s.option_detail_id, pso.option_detail_name AS subOptionName1,
                pso2.option_detail_name AS subOptionName2,
                pso.option_id AS option_id1, pso2.option_id AS option_id2,
                option_price AS optionPrice, pso.option_detail_id as subOptionId1,
                pso2.option_detail_id AS subOPtionId2, QUANTITY
                FROM stock s
                JOIN product_sub_option pso ON s.option_detail_id = pso.option_detail_id
                JOIN product_sub_option pso2 ON s.option_detail_id2 = pso2.option_detail_id
                WHERE STOCK_ID = #{stockId}) sb
                JOIN product_main_option pmo on sb.option_id1 = pmo.option_id
                JOIN product_main_option pmo2 on sb.option_id2 = pmo2.option_id
        ORDER BY subOptionId1, subOPtionId2
    </select>

    <update id="updateStockQuantity" parameterType="map">
        UPDATE stock SET quantity = #{quantity} WHERE stock_id = #{stockId}
    </update>

    <select id="getQuantityByStockId" parameterType="Long" resultType="int">
        SELECT quantity FROM stock WHERE stock_id = #{stockId}
    </select>

    <select id="scrapCnt" parameterType="Long" resultType="int">
        SELECT count(*) AS cnt
        FROM product_scrap
        WHERE product_id = #{productId}
    </select>

    <delete id="deleteProductImg" parameterType="map">
        DELETE
        FROM product_img
        WHERE product_id = #{productId} AND type = #{type}
    </delete>
</mapper>