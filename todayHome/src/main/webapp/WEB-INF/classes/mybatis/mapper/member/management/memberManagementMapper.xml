<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="management">
	
    <select id="getMemberSeq" resultType="Long">
       SELECT seq_member.NEXTVAL FROM dual 
    </select>

    <insert id="insertMember" parameterType="com.sp.app.domain.member.Member">
		INSERT INTO MEMBER (MEMBER_ID, EMAIL, NAME, TEL)
		VALUES (#{memberId}, #{email},#{name, jdbcType=VARCHAR},#{tel, jdbcType=VARCHAR})
    </insert>

    <insert id="insertMemberDetail" parameterType="com.sp.app.domain.member.Member">
		INSERT INTO MEMBER_DETAIL (MEMBER_ID, NICKNAME, PASSWORD, REG_DATE, ENABLED, INFO)
		VALUES (#{memberId},#{nickName}, #{password}, SYSDATE, #{enabled}, #{info,jdbcType=VARCHAR})	
		
    </insert>
	
    <update id="insertMemberAll" parameterType="com.sp.app.domain.member.Member">
		INSERT ALL
			INTO MEMBER (MEMBER_ID, EMAIL, NAME, TEL)
			VALUES (#{memberId} ,#{email},#{name, jdbcType=VARCHAR},#{tel, jdbcType=VARCHAR})
			INTO MEMBER_DETAIL (MEMBER_ID, NICKNAME, PASSWORD, REG_DATE, PINFO)
			VALUES (#{memberId},#{nickName}, #{password}, SYSDATE, #{info, jdbcType=VARCHAR})
		SELECT * FROM dual    
    </update>
    
    <select id="emailCheck" parameterType="String" resultType="int">
		select count(*)
		from MEMBER
		where EMAIL = #{email}
    </select>
    
     <select id="nickNameCheck" parameterType="String" resultType="int">
		select count(*)
		from MEMBER_DETAIL
		where nickName = #{nickName}
    </select>

	
	<select id="readMemberById" parameterType="Long" resultType="com.sp.app.domain.member.Member">
		SELECT m.MEMBER_ID as memberId, MEMBER_ROLE_ID as memberRoleId, EMAIL, NAME, TEL, POST_NUM as postNum, ADDRESS1, ADDRESS2, NICKNAME, PASSWORD, REG_DATE as regDate, PROFILE_IMG_NAME as profileImgName, INFO
		FROM MEMBER m
		JOIN MEMBER_DETAIL md on m.MEMBER_ID = md.MEMBER_ID
		left join ADDRESS_BUNDLE ab on m.MEMBER_ID = ab.MEMBER_ID
		WHERE m.MEMBER_ID = #{memberId}	
	</select>

	<select id="readMemberByEmail" parameterType="String" resultType="com.sp.app.domain.member.Member">
		SELECT m.MEMBER_ID as memberId, MEMBER_ROLE_ID as memberRoleId, EMAIL, NAME, TEL, POST_NUM as postNum, ADDRESS1, ADDRESS2, NICKNAME, PASSWORD, REG_DATE as regDate, PROFILE_IMG_NAME as profileImgName, INFO
		FROM MEMBER m
		JOIN MEMBER_DETAIL md on m.MEMBER_ID = md.MEMBER_ID
		left join ADDRESS_BUNDLE ab on m.MEMBER_ID = ab.MEMBER_ID
		WHERE m.EMAIL = #{email}
	</select>
	
    <!-- 회원정보 수정  --> 
    <update id="updateMemberEnabled" parameterType="Map">
		UPDATE MEMBER_DETAIL SET enabled=#{enabled} WHERE MEMBER_ID=#{memberId}
    </update>
    
    <update id="updateMember" parameterType="com.sp.app.domain.member.Member">
		UPDATE MEMBER SET MEMBER_ROLE_ID = #{memberRoleId} , NAME = #{name}, TEL = #{tel}
		where MEMBER_ID = #{memberId}
    </update>
    
    <update id="updateMemberDetail" parameterType="com.sp.app.domain.member.Member">
		update MEMBER_DETAIL set NICKNAME = #{nickName}, PASSWORD = #{password}, PROFILE_IMG_NAME = #{profileImgName, jdbcType=VARCHAR}, INFO = #{info, jdbcType=VARCHAR}
		where MEMBER_ID = #{memberId}
    </update>

	<insert id="insertAddress" parameterType="com.sp.app.domain.member.Member">
		INSERT INTO ADDRESS_BUNDLE (MEMBER_ID, POST_NUM, ADDRESS1, ADDRESS2)
		VALUES (#{memberId}, #{postNum}, #{address1}, #{address2})
	</insert>

    <update id="updateAddress" parameterType="com.sp.app.domain.member.Member">
		UPDATE ADDRESS_BUNDLE set POST_NUM = #{postNum}, ADDRESS1 = #{address1}, ADDRESS2 = #{address2}
		where MEMBER_ID = #{memberId}
    </update>
    
    
    <select id="findMembersByNickname" parameterType="com.sp.app.domain.member.Member" resultType="com.sp.app.domain.member.Member">
    	SELECT m.MEMBER_ID as memberId, MEMBER_ROLE_ID as memberRoleId, EMAIL, NAME, TEL, POST_NUM as postNum, ADDRESS1, ADDRESS2, NICKNAME, PASSWORD, REG_DATE as regDate, PROFILE_IMG_NAME as profileImgName, INFO
		FROM MEMBER m
		JOIN MEMBER_DETAIL md on m.MEMBER_ID = md.MEMBER_ID
		left join ADDRESS_BUNDLE ab on m.MEMBER_ID = ab.MEMBER_ID
		WHERE INSTR(md.NICKNAME, #{nickName}) > 0 
    </select>
    
    
    <select id="findMembersByConditionDESC" parameterType="com.sp.app.domain.member.Member" resultType="com.sp.app.domain.member.Member">
	    SELECT m.MEMBER_ID AS memberId, MEMBER_ROLE_ID AS memberRoleId, EMAIL, NAME, TEL, POST_NUM AS postNum, ADDRESS1, ADDRESS2, NICKNAME, PASSWORD, REG_DATE AS regDate, PROFILE_IMG_NAME AS profileImgName, INFO
	    FROM MEMBER m
	    JOIN MEMBER_DETAIL md ON m.MEMBER_ID = md.MEMBER_ID
	    LEFT JOIN ADDRESS_BUNDLE ab ON m.MEMBER_ID = ab.MEMBER_ID
	    WHERE
       	 
        <if test="memberRoleIdList != null and memberRoleIdList.size() &gt; 0">
            m.MEMBER_ROLE_ID IN
            <foreach collection="memberRoleIdList" item="roleId" open="(" close=")" separator=",">
                #{roleId}
            </foreach>
        </if>
            
        <choose>
	        <when test="condition == 'nickName'">
	        	AND INSTR(md.NICKNAME, #{keyword}) > 0
	        </when>
	        <when test="condition == 'email'">
	            AND INSTR(EMAIL, #{keyword}) > 0
	        </when>
	        <otherwise>
	            	
	        </otherwise>
        </choose>
		ORDER BY REG_DATE DESC;
    </select>
    
	<select id="findMembersByCondition" parameterType="map" resultType="com.sp.app.domain.member.Member">
	    SELECT m.MEMBER_ID AS memberId, MEMBER_ROLE_ID AS memberRoleId, EMAIL, NAME, TEL, POST_NUM AS postNum, ADDRESS1, ADDRESS2, NICKNAME, PASSWORD, REG_DATE AS regDate, PROFILE_IMG_NAME AS profileImgName, INFO
	    FROM MEMBER m
	    JOIN MEMBER_DETAIL md ON m.MEMBER_ID = md.MEMBER_ID
	    LEFT JOIN ADDRESS_BUNDLE ab ON m.MEMBER_ID = ab.MEMBER_ID
	    WHERE
       	 
        <if test="memberRoleIdList != null and memberRoleIdList.size() &gt; 0">
            m.MEMBER_ROLE_ID IN
            <foreach collection="memberRoleIdList" item="roleId" open="(" close=")" separator=",">
                #{roleId}
            </foreach>
        </if>
            
        <choose>
	        <when test="condition == 'nickName'">
	        	AND INSTR(md.NICKNAME, #{keyword}) > 0
	        </when>
	        <when test="condition == 'email'">
	            AND INSTR(EMAIL, #{keyword}) > 0
	        </when>
	        <otherwise>
	            	
	        </otherwise>
        </choose>
        
        <choose>
        	<when test="sort == 'asc'">
        	 	ORDER BY REG_DATE ASC
        	</when>
        	<when test="sort == 'desc'">
        	 	ORDER BY REG_DATE DESC
        	</when>
        </choose>
		
	</select>

   
    
    
  
 

</mapper>